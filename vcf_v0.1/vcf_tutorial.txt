###
### Version 0.1
### vcf.py - a prototype Python API for VCF parsing
###
### Written by Mikhail Spivakov, 2011, current version distributed under the terms of CC BY-SA licence (Creative Commons Attribution-ShareAlike)
### Please report bugs/comments/suggestions to spivakov@ebi.ac.uk
###

Tutorial

1 Reading
2 Slicing (by coordinate or array of coordinates)
3 Iterating and accessing entries directly
4 Filtering (by pooled fields, by sample-level fields)
5 Extracting tags (from pooled fields, from sample-level fields)
6 Counting 
7 Comparing
8 Saving for future use (as pickle)
9 Writing out (not currently implemented)

####### 1 Reading #########

===================
## Synopsis:
from vcf import * 

# Method 1
y = VCF()
y.readFromFile("file.vcf")
# Method 2 (for longer files)
y = VCFfilter("file.vcf", filter = "QUAL>50 and any('GQ>10')", chunk = 100000)
===================

The API is tuned to GATK UnifiedGenotyper-generated VCF files, although it should be easily adaptable (if not immediately usable) with other VCFs.
These VCF files look like this:

===================
#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  sample1    sample2    sample3   <...>  sampleN
chr4    395     .       C       T       103.77  .  C=5;AF=0.42;AN=12;DP=11;Dels=0.00;HRun=0;HaplotypeScore=0.67;MQ=37.00;MQ0=0;QD=17.30;SB=-124.08	GT:AD:DP:GL:GQ    0/1:1,1:2:-3.47,-0.60,-3.87:28.64	./. 1/1:0,1:1:-3.37,-0.30,-0.00:3.01  <...>  0/0:3,0:3:-0.00,-0.90,-11.63:9.03
===================

Two ways of reading a VCF file into an object are currently implemented.

In the first one, an empty object is created and then populated using the readFromFile method:

===================
VCF.readFromFile(fname, refcol=3, altcol=4, qualcol=5, infocol=7, sampleformatcol=8, checkNonRef = False, commentChar = '#', verbose = True, readFromList = False)

Most of other function parameters are self-explanatory and shouldn't need to be adjusted, at least for GATK-generated VCF files.
checkNonRef: retain only entries, in which REF and ALT nucleotides are different (not needed in most cases as only those are usually included in the file)
readFromList: if True, fname should be a list of unparsed strings, each corresponding to a line of a VCF table.
refcol, altcol: columns in the VCF file containing the REF and ALT sequence, respectively
qualcol: column containing the quality score
infocol: column containing tags for the pooled sample (or _the_ sample in a single-sample design)
sampleformatcol: for pooled VCFs (generated by GATK), the FORMAT column containing a colon-separated list of sample-level tag names
It is expected that each column after sampleformatcol will contain colon-separated lists of tag values, in the same order as in the FORMAT column.
====================

However, for larger files (especially when filtering is required), it may be useful to read the file chunk-by-chunk and filter it on the fly.
In these case, the VCF object may instead be created using the VCFfilter factory:

====================
VCFfilter(fname, filter=None, field=None, count=False, chunk = 10000, maxchunks = None, *vcfFormatArgs)

The filter, field and count fields will be discussed in detail below. 
chunk: the size of chunk (in lines),
maxchunks: stop reading after N chunks
*vcfFormatArgs: any combination of the same arguments as in vcf.readFromFile: 
	refcol=3, altcol=4, qualcol=5, infocol=7, sampleformatcol=8, checkNonRef = False, commentChar = '#', verbose = True
====================

####### 2 Slicing #########

====================
## Synopsis:

z = y['chr5@214']
z = y[('chr5@214','chr8@2533532', 'chr10@11234')]
====================

The data is internally stored as a dictionary with keys corresponding to a value we shall call "coordinate": the chromosome and position merged into a single string separated by the '@' character. To create an object that contains the information for a single coordinate or set of coordinates, we can use the '[]' method taking a single coordinate or an array of coordinates as the argument.

####### 3 Iterating and accessing entries directly #########

====================
## Synopsis:
from vcf import * 

for snp in y:
	print snp
	(chr, pos) = coord(snp['COORD'])
	print chr, pos, snp['QUAL']
	strain2 = getSample(snp['_SAMPLES'], 2)
	if strain2:
		print strain2['GQ']

for (coord, snp) in y.items():
	print coord, snp
	(chr, pos) = coord(snp['COORD'])
	print snp['ALT']

for coord in y.keys():
	(chr, pos) = coord(snp['COORD'])

for snp in y.values():
	print snp
	print snp['REF']
====================

It is possible to use the elements of the object directly in loops.In the case of using the object itself as iterator, the elements will be dictionaries containing all tags for the pooled sample as keys, plus the '_SAMPLES' key containing a tuple of dictionaries, each containing sample-level fields for each sample. The coordinate will be stored in this dictionary under the 'COORD' key. To convert it to a tuple containing chromosome and position, you can use the coord() function. When VCF.items() is used as iterator, the result will be a tuple containing the coordinate and the above entry. The keys() and values() iterators return only coordinates or only the dictionary correponding to each coordinate.  

The exact set of keys for each entry will depend on the tags in the VCF file. While most keys will just refer directly to the value of the corresponding tags, some keys (and some fields in the VCF file) have been given a special treatment. These are listed below:

====================
## keys in the dictionary for each VCF entry that do not directly contain the corresponding tag values:

REF, ALT, QUAL: From the corresponding columns in the VCF file

(AC, AF, DP, ... and any other tag: as listed in the INFO field in the VCF file)

_SAMPLES: Contains a tuple of dictionaries that contain sample-level info for each sample. 
	    Importantly, this tuple will not contain samples that only show "./." for a given entry in the VCF file. 
	    To locate dictionaries corresponding to a sample of interest in this tuple, the function 
	    getSample(<tuple_of_dictionaries>, <sampleNo>) can be used, which will return either 
	    the sample-specific dictionary or False if the information for this sample is missing for this entry.

	    The sample-level keys in each of these dictionaries are generally defined by the FORMAT field of the VCF file, with the following exceptions:

	    NUM:	    			Sample number (1..N), where 1 corresponds to the first column in VCF file with sample-level info, and so on. 
 
	    ADref, ADalt: 	      Allelic depths (from the comma-separated AD field in the VCF file) (integers)

	    GT1, GT2:			Diploid genotype (from the slash-separated GT field in the VCF file). 
			 		      Unlike in the original VCF, takes values "ref" or "alt" for each allele.  

	    GLrr, GLra, GLaa:		Log-scaled likelihoods for ref/ref, alt/ref and alt/alt genotypes, respectively (floats).
				
	    (DP, GQ and any other field defined in the FORMAT column: as in the original VCF file)

====================

Although it may well be possible to work with the VCF object without ever accessing the dictionaries for each entry directly (as will be shown below), 
it is still important to know the names of the keys as they will be used for filtering and field extraction - see below.

####### 4 Filtering #########

====================
## Synopsis:

z = y.filter("CHR in set(['chr1', 'chr2']) and QUAL>50 and any('ADalt>3')")
# shorthand for the same that works only for conditions containing at least a single occurence of '>', '<' or '=':
z = y["QUAL>50 and any('ADalt>3')"]

z = y.filter("all('ADalt>3')")
z = y.filter("QUAL>50 and atleast(1, 'ADalt>3)")
z = y.filter("forstrain(3, 'ADalt>3')")
z = y.filter("CHR in set(['chr1', 'chr2']) and crosscomp('ADalt[1]==ADalt[3]')")

y = VCFfilter("file.vcf", filter = "POS>10000 and atleast(1, 'ADalt>3)")
====================

The filtering method of the VCF object is VCF.filter() and it returns a filtered object of the same class, 
which may be empty in case nothing has been retained with the filter.
The general idea of the filtering expression is that it is a string containing a python condition that will be evaluated for each entry 
in a virtual namespace which contain the corresponding dictionary keys as variables - and almost nothing else. See above for the list of 
pooled-level keys. Additionally, the CHR and POS variables (parsed from the COORD field) can also be used in expressions.

The individual sample-level keys are also accessible in this expression through service functions any('<expr>'), all('<expr>'), atleast(N, '<expr>'), forsample(N, '<expr>'). The expressions for these functions, in turn, can contain any keys for the sample-specific dictionaries and will be evaluated in their own strain-level virtual namespaces. Depending on the function, True will be returned if the specified condition is valid for any strain, all strains, at least N strains or for a specific strain, respectively.
Additionally, the function crosscomp('<>') can compare strain-level data between different strains for the same entry. The namespace for this function is slightly different: instead of scalar variables, all strain-specific fields in its namesp dictionaries, with keys corresponding to the strain number (in the order of columns in the VCF file; see example in the Synopsis).

It is also possible to perform filtering on the fly while reading the VCF file chunk-by-chunk, through the filter field of the VCFfilter factory that takes any of the expressions described above.

####### 5 Extracting individual fields #########

====================
## Synopsis:

z = y.field("AC")
z = y.field("ADalt", 2)
z = y.filter("all('ADalt>3')").field("AC")

from vcf import * 

z = VCFfilter("file.vcf", filter = "QUAL>50 and atleast(1, 'ADalt>3)", field= "AC")
z = VCFfilter("file.vcf", field= ("ADalt",2))
====================

The method VCF.field() returns the field of the specified name. When sample number is provided as a second argument, the field will be understood to refer to the sample-level info for the sample of interest (see example in the Synopsis).

It is possible to extract fields on the fly by providing the name of the field as the field argument for the VCFfilter factory. (Note that in this case VCFfilter will indeed return a list containing just this field and not a VCF object!). If a tuple of the format ("field", sampleNo) is provided instead of a string, the field will be extracted from the sample-level info for the sample of interest.

####### 6 Counting #########

====================
## Synopsis:
z = len(y)
z = len(y.filter("QUAL>50 and atleast(1, 'ADalt>3)"))

from vcf import * 

z = VCFfilter("file.vcf", filter = "QUAL>50 and atleast(1, 'ADalt>3)", count = True)
====================

The function len(<VCF object>) will return the number of entries in it. 
Counting is also possible on the fly using the VCFfilter factory. Note that this can be combined with any 
filtering expression can be defined at the same time, but the field argument should remain unspecified. 

####### 7 Comparing #########

====================
## Synopsis:
coords = y1 and y2 # present in both y1 and y2
coords = y1 or y1  # present in either y1 and y2
coords = y1 - y2   # present in y1, but not y2
====================

Comparison is performed at the level of coordinates only and so to avoid confusion the returned values are sets of coordinates rather than VCF objects.

####### 8 Saving for future use #########

====================
## Synopsis:

y.pickle("myVcf.pickle")

from vcf import * 
z = VCF()
z.readFromPickle("myVcf.pickle")
====================

The data from a VCF object can be saved using the method VCF.pickle(<file-name>). 
To get it back, create a new object and populate it using the method VCF.readFromPickle(<file-name>).

####### 9 Writing out #########

Writing out is not currently implemented, but is included in the future plans.